{"version":3,"sources":["components/Arena/Arena.module.css","components/LeaderBoard/LeaderBoard/LeaderBoard.module.css","components/LeaderBoard/BotStatistics/BotStatistics.module.css","components/Dropdown/Dropdown.module.css","components/BattleLog/BattleLog.module.css","components/UserSelection/UserSelection.module.css","components/OpaqueBackground/OpaqueBackground.module.css","components/Input/Input.module.css","components/Slider/Slider.module.css","components/Button/Button.module.css","components/GitIcon/GitIcon.module.css","images/bot-1.png","images/bot-2.png","images/bot-3.png","images/bot-4.png","images/bot-5.png","images/bot-6.png","images/bot-7.png","images/bot-8.png","images/bot-9.png","images/bot-10.png","images/bot-11.png","App.module.css","components/UserConfigBox/UserConfigBox.module.css","context/GameContext/GameContext.js","components/Arena/Arena.jsx","components/LeaderBoard/BotStatistics/BotStatistics.jsx","components/OpaqueBackground/OpaqueBackground.jsx","components/LeaderBoard/LeaderBoard/LeaderBoard.jsx","components/Input/Input.jsx","components/Slider/Slider.jsx","components/Dropdown/Dropdown.jsx","components/UserSelection/UserSelection.jsx","components/Button/Button.jsx","context/GameContext/Bot.js","components/UserConfigBox/UserConfigBox.jsx","components/BattleLog/BattleLog.jsx","components/GitIcon/GitIcon.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","container","grid-container","bot-container","row","cell","bot-label","bot-image","inner_wrapper","container__title","container__headings","wrapper","container__segment","dropbtn","dropdown","dropdownContent","title","logs","status_txt","computations_txt","wrapper_main","dropdownContainer","label","input","text","icon","__webpack_require__","p","app-container","GameContext","createContext","GameProvider","_ref","children","_useState","useState","_useState2","_slicedToArray","gameState","setGameState","_useState3","_useState4","bots","setBots","_useState5","_useState6","logsBots","setLogBots","_useState7","_useState8","pause","setPause","contextValue","addBot","bot","existingBotIndex","findIndex","b","formId","prevBots","newBots","_toConsumableArray","concat","removeBot","botId","filter","id","checkOutcome","bot1","bot2","_bot1$coordinates","coordinates","rowIndex1","rowIndex","columnIndex1","columnIndex","_bot2$coordinates","rowIndex2","columnIndex2","earliestTimestamp","Math","min","timestamp","firstBot","secondBot","operator","binaryValue","React","createElement","Provider","value","Arena","_useContext","useContext","matrix","setMatrix","intervalIdsRef","useRef","updateMatrix","botArray","arguments","length","undefined","updatedMatrix","Array","from","forEach","_bot$coordinates","className","styles","style","backgroundColor","labelColor","name","src","image","alt","useEffect","moveBotWithDelay","intervalId","setInterval","setTimeout","updatedBots","map","updatedBot","_updatedBot$coordinat","updatedTimestamp","Date","now","newRow","newColumn","direction","updatedCoordinates","_objectSpread","directions","newDirection","newBotDirection","floor","random","newBinary","round","botUpdate","movementId","uuidv4","gameStatus","prevLogs","winner","updatedBotsWithTieStatus","winnerUpdated","wins","losses","moveBot","speed","current","push","clearIntervals","clearInterval","some","every","console","log","key","BotStatistics","sortedBots","sort","a","data-testid","index","OpaqueBackground","LeaderBoard","uniqueBots","setUniqueBots","prevUniqueBots","botIndex","el","slice","Input","onChange","setMatchFound","nameCount","botName","htmlFor","type","event","target","required","Slider","handleSliderChange","max","e","defaultOptions","Dropdown","_ref$options","options","selectedOption","setSelectedOption","downArrow","option","onClick","handleDropdownChange","UserSelection","setNewBots","matchFound","setName","setSpeed","setValue","setDirection","_useState9","_useState10","operation","setOperation","_useState11","_useState12","isFormComplete","setIsFormComplete","existingBot","Button","width","height","fontSize","checkIsReady","Bot","_this","this","_classCallCheck","updateWins","updateLosses","setGameStatus","setLabelColor","setCoordinates","_createClass","r","g","North","South","East","West","timestap","imageArray","images","UserConfigPanel","setFormId","setImage","randomImageIndex","randomBotImg","Number","setBinaryValue","setOperator","otherBot","otherIndex","alert","BattleLog","scrollableElement","scrollTop","scrollHeight","clientHeight","window","matchMedia","matches","ref","isArray","uniqueLogs","botMessages","prevBot","botResult","botComputation","renderLogs","GitIcon","href","rel","App","UserConfigBox","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.80b6c83b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Arena_container__2UWnt\",\"grid-container\":\"Arena_grid-container__17x-i\",\"bot-container\":\"Arena_bot-container__17v1f\",\"row\":\"Arena_row__1cyRx\",\"cell\":\"Arena_cell__ugpt3\",\"bot-label\":\"Arena_bot-label__3_ZNI\",\"bot-image\":\"Arena_bot-image__27Z7_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inner_wrapper\":\"LeaderBoard_inner_wrapper__3CX3c\",\"container__title\":\"LeaderBoard_container__title__GOU0v\",\"container\":\"LeaderBoard_container__3PNEX\",\"container__headings\":\"LeaderBoard_container__headings__1_nUJ\",\"wrapper\":\"LeaderBoard_wrapper__F0lxr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"BotStatistics_wrapper__2705r\",\"container\":\"BotStatistics_container__2fe43\",\"container__segment\":\"BotStatistics_container__segment__11d2C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropbtn\":\"Dropdown_dropbtn__2aHeK\",\"dropdown\":\"Dropdown_dropdown__38BGn\",\"dropdownContent\":\"Dropdown_dropdownContent__xW6qc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"BattleLog_wrapper__3ZqDZ\",\"title\":\"BattleLog_title__2uBBf\",\"logs\":\"BattleLog_logs__QI_86\",\"container\":\"BattleLog_container__1HOG9\",\"status_txt\":\"BattleLog_status_txt__3fHDf\",\"computations_txt\":\"BattleLog_computations_txt__2uNeU\",\"wrapper_main\":\"BattleLog_wrapper_main__Ci0xZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UserSelection_wrapper__3taTL\",\"container\":\"UserSelection_container__2NpSu\",\"dropdownContainer\":\"UserSelection_dropdownContainer__2UNpj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"OpaqueBackground_wrapper__2aOZj\",\"container\":\"OpaqueBackground_container__12yhB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Input_label__1OePU\",\"input\":\"Input_input__qNuca\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Slider_label__3UhEv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Button_container__1hqrN\",\"text\":\"Button_text__3LkmR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"GitIcon_icon__27JPn\",\"container\":\"GitIcon_container__jm3f-\"};","module.exports = __webpack_public_path__ + \"static/media/bot-1.1c235c9c.png\";","module.exports = __webpack_public_path__ + \"static/media/bot-2.ae5aa138.png\";","module.exports = __webpack_public_path__ + \"static/media/bot-3.5e66f967.png\";","module.exports = __webpack_public_path__ + \"static/media/bot-4.2d932671.png\";","module.exports = __webpack_public_path__ + \"static/media/bot-5.cfac91dc.png\";","module.exports = __webpack_public_path__ + \"static/media/bot-6.56fbabae.png\";","module.exports = __webpack_public_path__ + \"static/media/bot-7.b0922141.png\";","module.exports = __webpack_public_path__ + \"static/media/bot-8.9820ef3e.png\";","module.exports = __webpack_public_path__ + \"static/media/bot-9.bbff64ae.png\";","module.exports = __webpack_public_path__ + \"static/media/bot-10.92b6cdea.png\";","module.exports = __webpack_public_path__ + \"static/media/bot-11.1e0e5789.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app-container\":\"App_app-container__1oKCc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UserConfigBox_wrapper__BJ0cp\"};","import React from 'react';\r\nimport { createContext, useState } from 'react';\r\n\r\nconst GameContext = createContext();\r\n\r\nconst GameProvider = ({ children }) => {\r\n\t// State for game state\r\n\tconst [gameState, setGameState] = useState(false);\r\n\r\n\t// State for bots\r\n\tconst [bots, setBots] = useState([]);\r\n\r\n\tconst [logsBots, setLogBots] = useState([])\r\n\r\n\tconst [pause, setPause] = useState(false)\r\n\r\n\t// Function to add a new bot (id generated outside)\r\n\tconst addBot = (bot) => {\r\n\t\tconst existingBotIndex = bots.findIndex((b) => b.formId === bot.formId);\r\n\r\n\t\tif (existingBotIndex !== -1) {\r\n\t\t\t// Replace the existing bot with the new bot\r\n\t\t\tsetBots((prevBots) => {\r\n\t\t\t\tconst newBots = [...prevBots];\r\n\t\t\t\tnewBots[existingBotIndex] = bot;\r\n\t\t\t\treturn newBots;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Add the new bot\r\n\t\t\tsetBots((prevBots) => [...prevBots, bot]);\r\n\t\t}\r\n\t};\r\n\r\n\t// Function to remove a bot\r\n\tconst removeBot = (botId) => {\r\n\t\tsetBots((prevBots) => prevBots.filter((bot) => bot.id !== botId));\r\n\t};\r\n\r\n\t// Updated checkOutcome to determine if bots are in the same spot and returns id instead of Name.\r\n\tconst checkOutcome = (bot1, bot2) => {\r\n\t\t// Determine the earliest timestamp\r\n\t\tconst { rowIndex: rowIndex1, columnIndex: columnIndex1 } = bot1.coordinates;\r\n\t\tconst { rowIndex: rowIndex2, columnIndex: columnIndex2 } = bot2.coordinates;\r\n\t\tif (rowIndex1 === rowIndex2 && columnIndex1 === columnIndex2) {\r\n\t\t\tconst earliestTimestamp = Math.min(bot1.timestamp, bot2.timestamp);\r\n\r\n\t\t\t//bot1 moved first, it's assigned as firstBot\r\n\t\t\tconst firstBot = bot1.timestamp === earliestTimestamp ? bot1 : bot2;\r\n\t\t\t//bot1 is assigned to the firstBot, then second bot is bot2\r\n\t\t\tconst secondBot = bot1.timestamp === earliestTimestamp ? bot2 : bot1;\r\n\r\n\t\t\t// Calculate the result based on the operator\r\n\t\t\tlet result;\r\n\t\t\tif (firstBot.operator === 'AND') {\r\n\t\t\t\tresult = firstBot.binaryValue && secondBot.binaryValue;\r\n\t\t\t} else if (firstBot.operator === 'OR') {\r\n\t\t\t\tresult = firstBot.binaryValue || secondBot.binaryValue;\r\n\t\t\t} else if (firstBot.operator === 'NOR') {\r\n\t\t\t\tresult = !(firstBot.binaryValue || secondBot.binaryValue);\r\n\t\t\t} else if (firstBot.operator === 'XOR') {\r\n\t\t\t\tresult = firstBot.binaryValue !== secondBot.binaryValue;\r\n\t\t\t\t// If the binary values are different, the result is true (1),\r\n\t\t\t\t// if they are the same, the result is false (0).\r\n\t\t\t} else {\r\n\t\t\t\tresult = null; //default result\r\n\t\t\t}\r\n\r\n\treturn result ? firstBot.id : 'tie';\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\r\n\t// Defining the context values\r\n\tconst contextValue = {\r\n\t\tgameState,\r\n\t\tsetGameState,\r\n\t\tbots,\r\n\t\tsetBots,\r\n\t\tlogsBots, \r\n\t\tsetLogBots,\r\n\t\taddBot,\r\n\t\tremoveBot,\r\n\t\tcheckOutcome,\r\n\t\tpause, \r\n\t\tsetPause\r\n\t};\r\n\r\n\t// Provide the context value to children components\r\n\treturn <GameContext.Provider value={contextValue}>{children}</GameContext.Provider>;\r\n};\r\n\r\nexport { GameContext, GameProvider };\r\n","import React, { useContext, useEffect, useState, useRef } from 'react';\r\nimport { GameContext } from '../../context/GameContext/GameContext';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './Arena.module.css';\r\n\r\nfunction Arena() {\r\n\tconst { bots, setBots, gameState, setGameState, checkOutcome, setLogBots, setPause, pause } = useContext(GameContext);\r\n\tconst [matrix, setMatrix] = useState([]);\r\n\tconst intervalIdsRef = useRef([]);\r\n\r\n\t\r\n\tconst moveBot = (bot) => {\r\n\t\tsetBots((prevBots) => {\r\n\t\t\tconst updatedBots = prevBots.map((updatedBot) => {\r\n\t\t\t\tif (updatedBot.id === bot.id) {\r\n\t\t\t\t\tconst { rowIndex, columnIndex } = updatedBot.coordinates;\r\n\t\t\t\t\tconst updatedTimestamp = Date.now();\r\n\t\t\t\t\tlet newRow = rowIndex;\r\n\t\t\t\t\tlet newColumn = columnIndex;\r\n\t\r\n\t\t\t\t\t// Update coordinates based on direction\r\n\t\t\t\t\tswitch (bot.direction) {\r\n\t\t\t\t\t\tcase 'North':\r\n\t\t\t\t\t\t\tnewRow = rowIndex - 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'South':\r\n\t\t\t\t\t\t\tnewRow = rowIndex + 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'East':\r\n\t\t\t\t\t\t\tnewColumn = columnIndex + 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'West':\r\n\t\t\t\t\t\t\tnewColumn = columnIndex - 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif (newRow >= 0 && newRow < 8 && newColumn >= 0 && newColumn < 8) {\r\n\t\t\t\t\t\tconst updatedCoordinates = { rowIndex: newRow, columnIndex: newColumn };\r\n\t\r\n\t\t\t\t\t\treturn { ...updatedBot, coordinates: updatedCoordinates,};\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Change bot's direction if it hits the wall\r\n\t\t\t\t\t\tlet directions = ['North', 'South', 'East', 'West'];\r\n\t\r\n\t\t\t\t\t\tswitch (`${newRow},${newColumn}`) {\r\n\t\t\t\t\t\t\tcase '0,7':\r\n\t\t\t\t\t\t\t\tdirections = ['South', 'West'];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase '0,0':\r\n\t\t\t\t\t\t\t\tdirections = ['South', 'East'];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase '7,7':\r\n\t\t\t\t\t\t\t\tdirections = ['North', 'West'];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase '7,0':\r\n\t\t\t\t\t\t\t\tdirections = ['North', 'East'];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tconst newDirection = directions.filter((direction) => direction !== bot.direction);\r\n\t\t\t\t\t\tconst randomIndex = Math.floor(Math.random() * newDirection.length);\r\n\t\t\t\t\t\tconst newBotDirection = newDirection[randomIndex];\r\n\t\t\t\t\t\t// experimental feature: bots change binary on wall hit, as some game states will only tie (never end)\r\n\t\t\t\t\t\tconst newBinary = Math.round(Math.random());\r\n\t\t\t\t\t\tconst botUpdate = { ...updatedBot, direction: newBotDirection, timestamp: updatedTimestamp, movementId: uuidv4(), binaryValue: newBinary, gameStatus: 'wall' };\r\n\t\t\t\t\t\tsetLogBots((prevLogs) => [...prevLogs, botUpdate]);\r\n\t\t\t\t\t\treturn botUpdate;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn updatedBot;\r\n\t\t\t});\r\n\t\r\n\t\t\tconst winner = checkOutcome(updatedBots[0], updatedBots[1]);\r\n\t\t\tconst updatedTimestamp = Date.now();\r\n\t\t\tif (winner === 'tie') {\r\n\t\t\t\tconst updatedBotsWithTieStatus = updatedBots.map((updatedBot) => {\r\n\t\t\t\t\t\tconst botUpdate = { ...updatedBot, gameStatus: 'tie', movementId: uuidv4() };\r\n\t\t\t\t\t\tsetLogBots((prevLogs) => [...prevLogs, botUpdate]);\r\n\t\t\t\t\t\treturn botUpdate;\r\n\t\t\t\t});\r\n\t\t\t\tupdateMatrix(updatedBotsWithTieStatus);\r\n\t\t\t\treturn updatedBotsWithTieStatus;\r\n\t\t\t} else if (winner) {\r\n\t\t\t\tsetGameState(!gameState)\r\n\t\t\t\tconst winnerUpdated = updatedBots.map((updatedBot) => {\r\n\t\t\t\t\tif (updatedBot.id === bot.id) {\r\n\t\t\t\t\t\tconst botUpdate = {\r\n\t\t\t\t\t\t\t...updatedBot,\r\n\t\t\t\t\t\t\ttimestamp: updatedTimestamp,\r\n\t\t\t\t\t\t\tgameStatus: 'winner',\r\n\t\t\t\t\t\t\tmovementId: uuidv4(),\r\n\t\t\t\t\t\t\twins: updatedBot.wins + 1\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\treturn botUpdate;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst botUpdate = {\r\n\t\t\t\t\t\t\t...updatedBot,\r\n\t\t\t\t\t\t\ttimestamp: updatedTimestamp,\r\n\t\t\t\t\t\t\tgameStatus: 'loser',\r\n\t\t\t\t\t\t\tmovementId: uuidv4(),\r\n\t\t\t\t\t\t\tlosses: updatedBot.losses + 1\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\treturn botUpdate;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n        setLogBots((prevLogs) => [...prevLogs, ...winnerUpdated]);\r\n        return winnerUpdated;\r\n      } else {\r\n        updateMatrix(updatedBots);\r\n        return updatedBots;\r\n      }\r\n    });\r\n  };\r\n\r\n\tconst updateMatrix = (botArray = bots) => {\r\n\t\tconst updatedMatrix = Array.from({ length: 8 }, () => Array.from({ length: 8 }, () => null));\r\n\r\n\t\tbotArray.forEach((bot) => {\r\n\t\t\tconst { rowIndex, columnIndex } = bot.coordinates;\r\n\t\t\tupdatedMatrix[rowIndex][columnIndex] = (\r\n\t\t\t\t<div className={styles['bot-container']}>\r\n\t\t\t\t\t<p className={styles['bot-label']} style={{ backgroundColor: bot.labelColor }}>\r\n\t\t\t\t\t\t{bot.name}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<img src={bot.image} alt={bot.name} className={styles['bot-image']} />\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tsetMatrix(updatedMatrix);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateMatrix(bots);\r\n\t\tconst moveBotWithDelay = (bot) => {\r\n\t\t\tconst intervalId = setInterval(() => {\r\n\t\t\t\tsetTimeout(() => moveBot(bot), 500);\r\n\t\t\t}, 700 - bot.speed * 2);\r\n\r\n\t\t\tintervalIdsRef.current.push(intervalId);\r\n\t\t};\r\n\r\n\t\tconst clearIntervals = () => {\r\n\t\t\tintervalIdsRef.current.forEach((intervalId) => {\r\n\t\t\t\tclearInterval(intervalId);\r\n\t\t\t});\r\n\t\t\tintervalIdsRef.current = [];\r\n\t\t};\r\n\r\n\t\tif (gameState) {\r\n\t\t\tbots.forEach((bot) => {\r\n\t\t\t\tmoveBotWithDelay(bot);\r\n\t\t\t});\r\n\t\t}  else {\r\n\t\t\tclearIntervals();\r\n\t\t}\r\n\r\n\t\treturn clearIntervals;\r\n\t}, [gameState, bots]); \r\n\r\n\tuseEffect(() => {\r\n\t\tif (!gameState && bots.some(bot => bot.gameStatus === 'winner')) {\r\n\t\t\tconst clearIntervals = () => {\r\n\t\t\t\tintervalIdsRef.current.forEach((intervalId) => {\r\n\t\t\t\t\tclearInterval(intervalId);\r\n\t\t\t\t});\r\n\t\t\t\tintervalIdsRef.current = [];\r\n\t\t\t};\r\n\t\t\tupdateMatrix([]);\r\n\t\t\tclearIntervals();\r\n\t\t\tsetBots([])\r\n\t\t}\r\n\t}, [gameState])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (gameState && bots.every(bot => bot.gameStatus !== 'winner')){\r\n\t\t\tsetPause(true)\r\n\t\t\tconsole.log(pause)\r\n\t\t} else if (!gameState && bots.some(bot => bot.gameStatus === 'winner')) {\r\n\t\t\tsetPause(false)\r\n\t\t\tconsole.log(pause)\r\n\t\t}\r\n\t}, [gameState])\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!gameState) {\r\n\t\tsetLogBots((prevLogs) => [...prevLogs, ...bots]);\r\n\t\t}\r\n\t}, [gameState])\r\n\r\n\treturn (\r\n\t\t<div className={styles.container}>\r\n\t\t\t<div className={styles['grid-container']}>\r\n\t\t\t\t{matrix.map((row, rowIndex) => (\r\n\t\t\t\t\t<div key={rowIndex} className={styles.row}>\r\n\t\t\t\t\t\t{row.map((cell, columnIndex) => (\r\n\t\t\t\t\t\t\t<div key={columnIndex} className={styles.cell}>\r\n\t\t\t\t\t\t\t\t{cell}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Arena;\r\n","import React from 'react';\r\nimport styles from './BotStatistics.module.css';\r\n\r\nconst BotStatistics = ({ bots }) => {\r\n    \r\n    const sortedBots = [...bots].sort((a, b) => b.wins - a.wins);\r\n    return (\r\n        <div className={styles.wrapper} data-testid=\"bot-statistics\">\r\n            {sortedBots.map((bot, index) => {\r\n                return <div \r\n                    key={index}\r\n                    className={styles.container}\r\n                    data-testid=\"bot-item\">\r\n                    <p className={styles.container__segment}>{bot.name}</p>\r\n                    <p className={styles.container__segment}>{bot.wins}</p>\r\n                    <p className={styles.container__segment}>{bot.losses}</p>\r\n                </div>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BotStatistics;","import React from 'react';\r\nimport styles from './OpaqueBackground.module.css';\r\n\r\nconst OpaqueBackground = ({ children, style }) => {\r\n\treturn (\r\n\t\t<div className={styles.wrapper} style={style} data-testid=\"opaque-background-wrapper\">\r\n\t\t\t<div className={styles.container} data-testid=\"opaque-background-container\">\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default OpaqueBackground;\r\n","import React, { useState, useEffect, useContext }  from 'react';\r\nimport styles from './LeaderBoard.module.css'\r\nimport BotStatistics from '../BotStatistics/BotStatistics';\r\nimport { GameContext } from '../../../context/GameContext/GameContext';\r\nimport OpaqueBackground from '../../OpaqueBackground/OpaqueBackground';\r\n\r\nconst LeaderBoard = () => {\r\n  const { bots } = useContext(GameContext);\r\n  const [uniqueBots, setUniqueBots] = useState([])\r\n\r\n  useEffect(() => {\r\n    console.log(uniqueBots)\r\n  }, [uniqueBots])\r\n\r\n  const storeBot = () => {\r\n    bots.forEach(bot => {\r\n      //for the first round when unique bots array is still empty, we copy all the bots\r\n      if (uniqueBots.length === 0) {\r\n\r\n        setUniqueBots(prevUniqueBots => [...prevUniqueBots, bot]);\r\n      } \r\n      else {\r\n      // every next round we check for the matching names/indexes in bots array\r\n        const botIndex = uniqueBots.findIndex(el => el.name === bot.name);\r\n        if (botIndex !== -1) {\r\n          console.log(`bot already exists at index ${botIndex}`);\r\n          const updatedBot = {\r\n            name: bot.name,\r\n            wins: bot.wins+uniqueBots[botIndex].wins,\r\n            losses: bot.losses+uniqueBots[botIndex].losses,\r\n          };\r\n          //only update the bot that needs tally increment\r\n          setUniqueBots(prevUniqueBots => [\r\n            ...prevUniqueBots.slice(0, botIndex),\r\n            updatedBot,\r\n            ...prevUniqueBots.slice(botIndex + 1),\r\n          ]);\r\n        } else {\r\n          //if no matching names, we add Bot straight to a UniqueBots array\r\n          setUniqueBots(prevUniqueBots => [...prevUniqueBots, bot]);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    storeBot()\r\n  }, [bots])\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <OpaqueBackground>\r\n        <div className={styles.inner_wrapper}>\r\n          <h3 className={styles.container__title}>Leaders</h3>\r\n          <div className={styles.container}>\r\n              <div className={styles.container__headings}>\r\n                  <h4>User</h4>\r\n                  <h4>Wins</h4>\r\n                  <h4>Losses</h4>\r\n              </div>\r\n              <BotStatistics bots={uniqueBots}/>\r\n          </div>\r\n        </div>\r\n      </OpaqueBackground>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LeaderBoard;\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport styles from './Input.module.css';\r\nimport { GameContext } from '../../context/GameContext/GameContext';\r\n\r\nconst Input = ({ label, value, onChange, setMatchFound }) => {\r\n\tconst { bots } = useContext(GameContext);\r\n\t\r\n\r\n\tconst handleInputChange = (event) => {\r\n\t\tonChange(event.target.value);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconst botNames = bots.map((bot) => bot.name);\r\n\t\tconst nameCount = botNames.filter((botName) => botName === value).length;\r\n\t\tsetMatchFound(nameCount > 1);\r\n\t}, [value, bots]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<label htmlFor=\"input\" className={styles.label}>\r\n\t\t\t\t{label}\r\n\t\t\t</label>\r\n\t\t\t<input className={styles.input} name=\"input\" type=\"text\" value={value} onChange={handleInputChange} required />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport styles from './Slider.module.css';\r\n\r\nconst Slider = ({ label, value, onChange }) => {\r\n\tconst handleSliderChange = (event) => {\r\n\t\tif (onChange) {\r\n\t\t\tonChange(event.target.value);\r\n\t\t\tconsole.log(event.target.value);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"range-slider\">\r\n\t\t\t<p className={styles.label}>{label}</p>\r\n\t\t\t<input type=\"range\" min=\"0\" max=\"100\" value={value} onChange={(e) => handleSliderChange(e)} className={styles} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Slider;\r\n","import React, { useState } from 'react';\r\nimport styles from './Dropdown.module.css';\r\n\r\nconst defaultOptions = ['Option 1', 'Option 2', 'Option 3'];\r\n\r\nconst Dropdown = ({ label, options = defaultOptions, value, onChange }) => {\r\n\tconst [selectedOption, setSelectedOption] = useState(value);\r\n\tconst handleDropdownChange = (option) => {\r\n\t\tsetSelectedOption(option);\r\n\t\tonChange(option);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={styles.dropdown}>\r\n\t\t\t<div className={styles.downArrow}>\r\n\t\t\t\t<button className={styles.dropbtn}>\r\n\t\t\t\t\t{selectedOption !== null && selectedOption !== undefined ? selectedOption : label}\r\n\t\t\t\t\t<img className={styles.image} src=\"./DownArrow.png\" />\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.dropdownContent}>\r\n\t\t\t\t{options.map((option) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<a key={option} onClick={() => handleDropdownChange(option)}>\r\n\t\t\t\t\t\t\t{option}\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Dropdown;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styles from './UserSelection.module.css';\r\nimport Input from '../Input/Input';\r\nimport Slider from '../Slider/Slider';\r\nimport Dropdown from '../Dropdown/Dropdown';\r\n\r\nconst UserSelection = ({ formId, setNewBots, setMatchFound, matchFound }) => {\r\n\tconst [name, setName] = useState('');\r\n\tconst [speed, setSpeed] = useState(50);\r\n\tconst [value, setValue] = useState(null);\r\n\tconst [direction, setDirection] = useState(null);\r\n\tconst [operation, setOperation] = useState(null);\r\n\tconst [isFormComplete, setIsFormComplete] = useState(false);\r\n\t\r\n \r\n\tuseEffect(() => {\r\n\t\tif (name && speed && value !== null && direction && operation) {\r\n\t\t\tsetIsFormComplete(true);\r\n\t\t} else {\r\n\t\t\tsetIsFormComplete(false);\r\n\t\t}\r\n\t}, [name, speed, value, direction, operation]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isFormComplete) {\r\n\t\tconst bot = {\r\n\t\t\t\tname: name,\r\n\t\t\t\tspeed: speed,\r\n\t\t\t\tvalue: value,\r\n\t\t\t\tdirection: direction,\r\n\t\t\t\toperation: operation,\r\n\t\t\t\tformId: formId,\r\n\t\t};\r\n\r\n\t\tsetNewBots((prevBots) => {\r\n\t\t\tconst updatedBots = prevBots.map((existingBot) => {\r\n\t\t\t\tif (existingBot.formId === bot.formId ) {\r\n\t\t\t\t// Update the existing bot's properties\r\n\t\t\t\treturn bot;\r\n\t\t\t\t}\r\n\t\t\treturn existingBot; // Keep other bots as they are\r\n\t\t\t});\r\n\t\r\n\t\t\tif (updatedBots.some((existingBot) => existingBot.formId === bot.formId)) {\r\n\t\t\t\t // Bot exists, update the state\r\n\t\t\treturn updatedBots;\r\n\t\t\t} else {\r\n\t\t\t  // Bot doesn't exist, add it to the array\r\n\t\t\treturn [...updatedBots, bot];\r\n\t\t\t}\r\n\t\t});\r\n\t\t}\r\n\t  }, [isFormComplete, speed, direction, operation, value, name]);\t  \r\n\r\n\treturn (\r\n\t\t<div className={styles.wrapper}>\r\n\t\t\t<div className={styles.container}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Input label=\"Name\" value={name} onChange={setName} \r\n\t\t\t\t\tsetMatchFound={setMatchFound} matchFound={matchFound} />\r\n\t\t\t\t\t<Slider label=\"Speed\" value={speed} onChange={setSpeed} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={styles.dropdownContainer}>\r\n\t\t\t\t\t<Dropdown label=\"Value\" options={[0, 1]} value={value} onChange={setValue} />\r\n\t\t\t\t\t<Dropdown label=\"Direction\" options={['North', 'South', 'East', 'West']} value={direction} onChange={setDirection} />\r\n\t\t\t\t\t<Dropdown label=\"Operation\" options={['AND', 'OR', 'NOR', 'XOR']} value={operation} onChange={setOperation} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default UserSelection;\r\n","import React from 'react';\r\nimport { useContext } from 'react';\r\nimport { GameContext } from '../../context/GameContext/GameContext';\r\nimport styles from './Button.module.css';\r\n\r\nconst Button = ({ onClick, width, height, fontSize, checkIsReady }) => {\r\n\tconst { gameState, setGameState } = useContext(GameContext);\r\n\r\n\tfunction handleClick() {\r\n\t\t// Adding in internal functionality to the button\r\n\t\tcheckIsReady() ? setGameState(!gameState) : console.log('not ready')\r\n\t\tif (onClick) {\r\n\t\t\t// Adding in outside functionality to the button\r\n\t\t\tonClick();\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<div className={styles.container} style={{ width, height }} onClick={handleClick}>\r\n\t\t\t<p className={styles.text} style={{ fontSize }}>\r\n\t\t\t\t{gameState ? 'STOP' : 'BATTLE!' }\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Button;\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nclass Bot {\r\n\tconstructor(name, image, binaryValue, operator, speed, direction, gameStatus, formId) {\r\n\t\tthis.id = uuidv4();\r\n\t\tthis.name = name;\r\n\t\tthis.image = image;\r\n\t\tthis.labelColor = this.setLabelColor();\r\n\t\tthis.binaryValue = binaryValue;\r\n\t\tthis.operator = operator;\r\n\t\tthis.direction = direction;\r\n\t\tthis.coordinates = this.setCoordinates();\r\n\t\tthis.timestamp = Date.now();\r\n\t\tthis.speed = speed;\r\n\t\tthis.wins = 0;\r\n\t\tthis.losses = 0;\r\n\t\tthis.gameStatus = gameStatus;\r\n\t\tthis.formId = formId;\r\n\t\tthis.movementId = uuidv4();\r\n\t}\r\n\r\n\t// Method to update name\r\n\tsetName(name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\t// method to set formId\r\n\tsetFormId(formId) {\r\n\t\tthis.formId = formId;\r\n\t}\r\n\r\n\t// Method to update image\r\n\tsetImage(image) {\r\n\t\tthis.image = image;\r\n\t}\r\n\r\n\t// Creates random color for bot label\r\n\tsetLabelColor() {\r\n\t\tvar r = Math.floor(Math.random() * 256);\r\n\t\tvar g = Math.floor(Math.random() * 256);\r\n\t\tvar b = Math.floor(Math.random() * 256);\r\n\r\n\t\treturn `rgba(${r}, ${g}, ${b}, 0.5)`;\r\n\t}\r\n\r\n\t// Method to set binary value\r\n\tsetBinaryValue(binaryValue) {\r\n\t\tthis.binaryValue = binaryValue;\r\n\t}\r\n\r\n\t// Method to set operator\r\n\tsetOperator(operator) {\r\n\t\tthis.operator = operator;\r\n\t}\r\n\r\n\t// Method to set direction\r\n\tsetDirection(direction) {\r\n\t\tthis.direction = direction;\r\n\t}\r\n\r\n\t// Method to set initial coordinates based on direction\r\n\tsetCoordinates() {\r\n\t\tconst directionTable = {\r\n\t\t\tNorth: { rowIndex: 7, columnIndex: 3 },\r\n\t\t\tSouth: { rowIndex: 0, columnIndex: 3 },\r\n\t\t\tEast: { rowIndex: 3, columnIndex: 0 },\r\n\t\t\tWest: { rowIndex: 3, columnIndex: 7 },\r\n\t\t};\r\n\t\tthis.coordinates = directionTable[this.direction];\r\n\t}\r\n\r\n\t// Method to upadte time of bot creation and movement\r\n\tupdateTimestamp() {\r\n\t\tthis.timestamp = Date.now();\r\n\t}\r\n\r\n  // Method to update wins\r\n  updateWins = () => {\r\n    this.wins++;\r\n  };\r\n\r\n  // Method to update losses\r\n  updateLosses = () => {\r\n    this.losses++;\r\n  };\r\n\r\n\t// Method to set speed\r\n\tsetSpeed(speed) {\r\n\t\tthis.speed = speed;\r\n\t}\r\n\r\n\tsetGameStatus = (gameStatus) => {\r\n\t\tthis.gameStatus = gameStatus;\r\n\t}\r\n\r\n\t// Method to retrieve the binary value of the bot (to use in Arena)\r\n\tgetBinaryValue() {\r\n\t\treturn this.binaryValue;\r\n\t}\r\n\r\n\tgetOperator() {\r\n\t\treturn this.operator;\r\n\t}\r\n\r\n\t// Method to get coordinates\r\n\tgetCoordinates() {\r\n\t\treturn this.coordinates;\r\n\t}\r\n\r\n\t// Method to get timestamp\r\n\tgetTimestap() {\r\n\t\treturn this.timestap;\r\n\t}\r\n\r\n\t// Method to get speed\r\n\tgetSpeed() {\r\n\t\treturn this.speed;\r\n\t}\r\n\r\n\t// Method to retrieve losses of the bot (to use in Leaderboard)\r\n\tgetWinCount() {\r\n\t\treturn this.wins;\r\n\t}\r\n\r\n\t// Method to retrieve Wins of the bot (to use in Leaderboard)\r\n\tgetLossCount() {\r\n\t\treturn this.losses;\r\n\t}\r\n}\r\n\r\nexport default Bot;\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport UserSelection from '../UserSelection/UserSelection';\r\nimport OpaqueBackground from '../OpaqueBackground/OpaqueBackground';\r\nimport Button from '../Button/Button';\r\nimport { GameContext } from '../../context/GameContext/GameContext';\r\nimport Bot from '../../context/GameContext/Bot';\r\nimport styles from './UserConfigBox.module.css';\r\nimport * as images from '../../images/imports';\r\n\r\nconst imageArray = [\r\n\timages.bot1,\r\n\timages.bot2,\r\n\timages.bot3,\r\n\timages.bot4,\r\n\timages.bot5,\r\n\timages.bot6,\r\n\timages.bot7,\r\n\timages.bot8,\r\n\timages.bot9,\r\n\timages.bot10,\r\n\timages.bot11\r\n  ];\r\n\r\nconst UserConfigPanel = () => {\r\n\tconst { addBot, pause } = useContext(GameContext);\r\n\tconst { gameState } = useContext(GameContext);\r\n\tconst [matchFound, setMatchFound] = useState(false);\r\n\tconst [newBots, setNewBots] = useState([])\r\n\r\n\tconst checkIsReady = () => {\r\n\t\tif (newBots.length > 1) {\r\n\t\tconst isDuplicateName = newBots.some((bot, index) => {\r\n\t\t\treturn newBots.findIndex((otherBot, otherIndex) => {\r\n\t\t\t\treturn bot.name === otherBot.name && index !== otherIndex;\r\n\t\t\t\t}) !== -1;\r\n\t\t\t});\r\n\t\t\t\r\n\t\tif (isDuplicateName) {\r\n\t\t\t// Duplicate name found\r\n\t\t\talert('Duplicate bot names found!');\r\n\t\t\treturn false\r\n\t\t} else {\r\n\t\t\t// no duplicates found\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t} else if (newBots.length == 1) {\r\n\t\t\t//not enough bots to start the game\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\tconst randomBotImg = () => {\r\n\t\tconst randomImageIndex = Math.floor(Math.random() * imageArray.length);\r\n\t\tconst randomImage = imageArray[randomImageIndex];\r\n\t\treturn randomImage\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\tif (gameState === true && pause === false) {\r\n\t\tnewBots.forEach(el => {\r\n\t\t\tconst bot = new Bot();\r\n\t\t\tbot.setName(el.name);\r\n\t\t\tbot.setFormId(el.formId);\r\n\t\t\tbot.setImage(randomBotImg());\r\n\t\t\tbot.setSpeed(Number(el.speed));\r\n\t\t\tbot.setBinaryValue(el.value);\r\n\t\t\tbot.setDirection(el.direction);\r\n\t\t\tbot.setCoordinates(); // Call setCoordinates after setDirection\r\n\t\t\tbot.setOperator(el.operation);\r\n\t\t\taddBot(bot);\r\n\t\t\t}) \r\n\t\t}\t\r\n\t}, [gameState]);\r\n\r\n\treturn (\r\n\t\t<div className={styles.wrapper}>\r\n\t\t\t<OpaqueBackground>\r\n\t\t\t\t<UserSelection formId={1} \r\n\t\t\t\t\tnewBots={newBots}\r\n\t\t\t\t\tsetNewBots={setNewBots} \r\n\t\t\t\t\tsetMatchFound={setMatchFound} \r\n\t\t\t\t\tmatchFound={matchFound} \r\n\t\t\t\t\t/>\r\n\t\t\t\t<UserSelection formId={2} \r\n\t\t\t\t\tnewBots={newBots}\r\n\t\t\t\t\tsetNewBots={setNewBots} \r\n\t\t\t\t\tsetMatchFound={setMatchFound} \r\n\t\t\t\t\tmatchFound={matchFound} \r\n\t\t\t\t\t/>\r\n\t\t\t\t<Button \r\n\t\t\t\tcheckIsReady={checkIsReady} />\r\n\t\t\t</OpaqueBackground>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default UserConfigPanel;\r\n","import React, { useRef, useEffect, useContext } from 'react';\r\nimport { GameContext } from '../../context/GameContext/GameContext';\r\nimport styles from './BattleLog.module.css';\r\n\r\nfunction BattleLog() {\r\n  const { logsBots } = useContext(GameContext);\r\n\r\n  // creating reference for wrapper to adjust scroll\r\n  const scrollableElement = useRef(null);\r\n\r\n  // makes the scroll bar head to bottom on first render and with every new log in array so user doesn't have to scroll down for new result\r\n  useEffect(() => {\r\n    if (scrollableElement.current) {\r\n      scrollableElement.current.scrollTop = scrollableElement.current.scrollHeight - scrollableElement.current.clientHeight;\r\n    }\r\n  }, [logsBots.length]);\r\n\r\n  // maps logs to wrapper\r\n\tconst renderLogs = () => {\r\n\t\tif (!Array.isArray(logsBots)) {\r\n\t\t\treturn null;\r\n\t\t} else {\r\n\t\t\tconst uniqueLogs = [];\r\n\t\t\tconst botMessages = logsBots.filter((bot) => {\r\n\t\t\t\t// Check if the bot's movementId already exists in uniqueLogs\r\n\t\t\t\tconst isDuplicate = uniqueLogs.some((prevBot) => {\r\n\t\t\t\t\treturn prevBot.movementId === bot.movementId;\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tif (isDuplicate) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tuniqueLogs.push(bot); // Add the bot to uniqueLogs\r\n\t\t\t\treturn true;\r\n\t\t\t}).map((bot, index) => {\r\n\t\t\t\tlet botResult = '';\r\n\t\t\t\tlet botComputation = '';\r\n\t\r\n\t\t\t\tif (bot.gameStatus === 'winner') {\r\n\t\t\t\t\tbotResult = `${bot.name} wins!`;\r\n\t\t\t\t\tbotComputation = `Operator: ${bot.operator} & Value: ${bot.binaryValue}`;\r\n\t\t\t\t} else if (bot.gameStatus === 'loser') {\r\n\t\t\t\t\tbotResult = `${bot.name} loses!`;\r\n\t\t\t\t\tbotComputation = `Operator: ${bot.operator} & Value: ${bot.binaryValue}`;\r\n\t\t\t\t} else if (bot.gameStatus === 'wall') {\r\n\t\t\t\t\tbotResult = `${bot.name} crashed into that wall!`;\r\n\t\t\t\t\tbotComputation = `New Direction: ${bot.direction} & New Value: ${bot.binaryValue}`;\r\n\t\t\t\t} else if (bot.gameStatus === 'tie') {\r\n\t\t\t\t\tbotResult = `${bot.name} tied!`;\r\n\t\t\t\t\tbotComputation = `Operator: ${bot.operator} & Value: ${bot.binaryValue}`;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<p key={index} className={styles.status_txt}>\r\n\t\t\t\t\t\t<p>{botResult}</p>\r\n\t\t\t\t\t\t<p>{botComputation}</p>\r\n\t\t\t\t\t\t<p></p>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t);\r\n\t\t\t});\r\n\r\n\t\r\n\t\t\treturn (\r\n\t\t\t\t<div className={styles.container}>\r\n\t\t\t\t\t{botMessages}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n  return window.matchMedia('(max-width: 768px)').matches ? null : (\r\n    <div className={styles.wrapper}>\r\n      <div className={styles.title}>\r\n        <p>Battle Log</p>\r\n      </div>\r\n      <div className={styles.logs} ref={scrollableElement}>\r\n        {renderLogs()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BattleLog;","import React from 'react';\r\nimport styles from './GitIcon.module.css';\r\n\r\nconst GitIcon = () => {\r\n\treturn (\r\n\t\t<div className={styles.container}>\r\n            <a href=\"https://github.com/chingu-voyages/v44-tier2-team-20\" target=\"_blank\" rel=\"noreferrer\">\r\n                <div className={styles.icon} />\r\n            </a>\r\n        </div>\r\n\t);\r\n};\r\n\r\nexport default GitIcon;","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport { GameProvider } from './context/GameContext/GameContext';\r\nimport Arena  from './components/Arena/Arena';\r\nimport LeaderBoard from './components/LeaderBoard/LeaderBoard/LeaderBoard'\r\nimport UserConfigBox from './components/UserConfigBox/UserConfigBox';\r\nimport BattleLog from './components/BattleLog/BattleLog';\r\nimport GitIcon from './components/GitIcon/GitIcon';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className={ styles[\"app-container\"]}>\r\n\t\t\t<GameProvider>\r\n\t\t\t\t<Arena />\r\n\t\t\t\t<GitIcon />\r\n\t\t\t\t<LeaderBoard />\r\n\t\t\t\t<UserConfigBox />\r\n\t\t\t\t<BattleLog />\r\n\t\t\t</GameProvider>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}